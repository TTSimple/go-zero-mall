// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package userclient

import (
	"context"

	"mall/service/user/rpc/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	LoginRequest         = user.LoginRequest
	LoginResponse        = user.LoginResponse
	RegisterRequest      = user.RegisterRequest
	RegisterResponse     = user.RegisterResponse
	UserCart             = user.UserCart
	UserCartListRequest  = user.UserCartListRequest
	UserCartListResponse = user.UserCartListResponse
	UserInfoRequest      = user.UserInfoRequest
	UserInfoResponse     = user.UserInfoResponse
	UserVip              = user.UserVip
	UserVipListRequest   = user.UserVipListRequest
	UserVipListResponse  = user.UserVipListResponse

	User interface {
		Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
		Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
		UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
		UserVipList(ctx context.Context, in *UserVipListRequest, opts ...grpc.CallOption) (*UserVipListResponse, error)
		UserCartList(ctx context.Context, in *UserCartListRequest, opts ...grpc.CallOption) (*UserCartListResponse, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUser) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UserInfo(ctx, in, opts...)
}

func (m *defaultUser) UserVipList(ctx context.Context, in *UserVipListRequest, opts ...grpc.CallOption) (*UserVipListResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UserVipList(ctx, in, opts...)
}

func (m *defaultUser) UserCartList(ctx context.Context, in *UserCartListRequest, opts ...grpc.CallOption) (*UserCartListResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UserCartList(ctx, in, opts...)
}
