// Code generated by goctl. DO NOT EDIT!
// Source: search.proto

package searchclient

import (
	"context"

	"mall/service/search/rpc/search"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BannedItem     = search.BannedItem
	BannedRequest  = search.BannedRequest
	BannedResponse = search.BannedResponse
	PinyinItem     = search.PinyinItem
	PinyinRequest  = search.PinyinRequest
	PinyinResponse = search.PinyinResponse
	SearchItem     = search.SearchItem
	SearchRequest  = search.SearchRequest
	SearchResponse = search.SearchResponse

	Search interface {
		Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
		Pinyin(ctx context.Context, in *PinyinRequest, opts ...grpc.CallOption) (*PinyinResponse, error)
		Banned(ctx context.Context, in *BannedRequest, opts ...grpc.CallOption) (*BannedResponse, error)
	}

	defaultSearch struct {
		cli zrpc.Client
	}
)

func NewSearch(cli zrpc.Client) Search {
	return &defaultSearch{
		cli: cli,
	}
}

func (m *defaultSearch) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	client := search.NewSearchClient(m.cli.Conn())
	return client.Search(ctx, in, opts...)
}

func (m *defaultSearch) Pinyin(ctx context.Context, in *PinyinRequest, opts ...grpc.CallOption) (*PinyinResponse, error) {
	client := search.NewSearchClient(m.cli.Conn())
	return client.Pinyin(ctx, in, opts...)
}

func (m *defaultSearch) Banned(ctx context.Context, in *BannedRequest, opts ...grpc.CallOption) (*BannedResponse, error) {
	client := search.NewSearchClient(m.cli.Conn())
	return client.Banned(ctx, in, opts...)
}
