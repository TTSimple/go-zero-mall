// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	"mall/service/gateway/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/",
				Handler: IndexHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/com/pinyin",
				Handler: ComPinyinHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/com/banned",
				Handler: ComBannedHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/order",
				Handler: OrderCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/order/:id",
				Handler: OrderUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/order/:id",
				Handler: OrderRemoveHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/order/:id",
				Handler: OrderDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/order",
				Handler: OrderListHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/pay",
				Handler: PayCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/pay/:id",
				Handler: PayDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/pay/callback",
				Handler: PayCallbackHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/product",
				Handler: ProductCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/product/:id",
				Handler: ProductUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/product/:id",
				Handler: ProductRemoveHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/product/detail",
				Handler: ProductDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/product/:id",
				Handler: ProductInfoHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/search/search",
				Handler: SearchHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/user/login",
				Handler: LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/user/register",
				Handler: RegisterHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/api/user",
				Handler: UserInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/user/vip",
				Handler: UserVipListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/user/cart",
				Handler: UserCartListHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/vip",
				Handler: VipCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/vip",
				Handler: VipUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/vip",
				Handler: VipRemoveHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/vip",
				Handler: VipDetailHandler(serverCtx),
			},
		},
	)
}
